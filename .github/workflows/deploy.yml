name: Azure Deployment Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  AZURE_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  SLACK_BOT_TOKEN: "${{ secrets.SLACK_BOT_TOKEN }}"
  SLACK_APP_TOKEN: "${{ secrets.SLACK_APP_TOKEN }}"

jobs:
  terraform-plan-policy-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Terraform install
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Terraform Plan
      run: terraform plan -out "tfplan"

    - name: Convert Terraform Plan to JSON
      run: terraform show -json tfplan | grep '^{.*}$' > tfplan.json

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run OPA Authz Policy Check
      id: opa-authz-check
      run: |
        opa eval --data .github/workflows/terraform.rego --input tfplan.json "data.terraform.analysis.authz"
      continue-on-error: false
    
    - name: Run OPA Score Policy Check
      id: opa-score-check
      run: |
        opa eval --data .github/workflows/terraform.rego --input tfplan.json "data.terraform.analysis.score"
      continue-on-error: false

    - name: Check OPA Authorization
      if: steps.opa-check.outcome == 'failure'
      run: |
        echo "Terraform plan does not meet policy requirements."
        exit 1

  terraform-apply:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Terraform Plan
      run: terraform plan -out=tfplan.binary

    - name: Convert Terraform Plan to JSON
      run: terraform show -json tfplan.binary > tfplan.json

    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/

    - name: Run OPA Authz Policy Check
      id: opa-authz-check
      run: |
        opa eval --data .github/workflows/terraform.rego --input tfplan.json "data.terraform.analysis.authz"
      continue-on-error: false
    
    - name: Run OPA Score Policy Check
      id: opa-score-check
      run: |
        opa eval --data .github/workflows/terraform.rego --input tfplan.json "data.terraform.analysis.score"
      continue-on-error: false

    - name: Check OPA Authorization
      if: steps.opa-check.outcome == 'failure'
      run: |
        echo "Terraform plan does not meet policy requirements."
        exit 1

    - name: Terraform Apply
      if: steps.opa-check.outcome == 'success'
      run: terraform apply -auto-approve

  docker-build-push:
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure
      run: |
        az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"
        az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    - name: Log in to ACR
      run: |
        az acr login --name boltslackbotcontainerregistry

    - name: Build Docker image
      run: |
        docker build \
          --build-arg SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }} \
          --build-arg SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }} \
          -t boltslackbotcontainerregistry.azurecr.io/slack-bot:latest .

    - name: Push Docker image to ACR
      run: |
        docker push boltslackbotcontainerregistry.azurecr.io/slack-bot:latest
